SET (PROJECT QWarpIN)

CMAKE_MINIMUM_REQUIRED (VERSION 2.8)
CMAKE_POLICY (VERSION 2.8)
IF (CMAKE_MAJOR_VERSION GREATER 2)
    CMAKE_POLICY (SET CMP0037 OLD)
ENDIF ()

ADD_DEFINITIONS (-DQWP_VERSION="0.2")
PROJECT (${PROJECT})

#######################################
##           FILES SECTION           ##
#######################################

# the base name of the main binary (executable) file
SET (BINARY_NAME wpi)

# where the program will be built to, and
# where the files from ${BUILD_ROOT_SOURCE_DIR}
# will be copied to. Located in ${CMAKE_BINARY_DIR}
SET (BUILD_ROOT
    out)

# this directory's contents will be copied to the program's
# build root. Files that the program will need at runtime
# should be placed there. Located in ${CMAKE_SOURCE_DIR}
SET (BUILD_ROOT_SOURCE_DIR
    bld)

SET (HEADERS
    src/WPI.h
    #src/globals.h
    src/ArchiveInterfaces/WAbstractArchiveInterface.h
    #src/ArchiveInterfaces/index.h
    #src/ArchiveInterfaces/WarpIN/WarpINArchiveInterface.h
    #src/ArchiveInterfaces/WarpIN/WAIFileReader.h
    #src/ArchiveInterfaces/WarpIN/WAIScriptParser/WAIScriptParser.h
    #src/GenericObjectFactory.h
    #src/exceptions.h
    src/WArchive.h
    src/WFileSystem/WFileSystemTree.h
    #src/WFileSystem/WFileSystem.h
    src/WFileSystem/WFileSystemNode.h
    src/WFileSystem/WFile.h
    src/WScriptHost/WScriptHost.h)

SET (SOURCES
    src/main.cpp
    src/WPI.cpp
    src/globals.cpp
    src/ArchiveInterfaces/WAbstractArchiveInterface.cpp
    src/ArchiveInterfaces/index.cpp
    src/ArchiveInterfaces/WarpIN/WarpINArchiveInterface.cpp
    src/exceptions.cpp
    src/WArchive.cpp
    src/WFileSystem/WFileSystemTree.cpp
    src/WFileSystem/WFileSystemNode.cpp
    src/WFileSystem/WFile.cpp
    src/WScriptHost/WScriptHost.cpp
    src/ArchiveInterfaces/WarpIN/WAIFileReader.cpp
    src/ArchiveInterfaces/WarpIN/WAIScriptParser/WAIScriptParser.cpp)

SET (FORMS src/WPI.ui)

SET (RESOURCES
    src/WScriptHost/script.qrc)

SET (LIBRARIES
    libbz2)

#######################################
##         UTILITY FUNCTIONS         ##
#######################################
FUNCTION (APPEND VAR)
    SET (${VAR} ${${VAR}} ${ARGN} PARENT_SCOPE)
ENDFUNCTION (APPEND)

#######################################
##         Qt / MISCELLANEOUS        ##
#######################################

# including Qt itself
FIND_PACKAGE (Qt4 REQUIRED)

# including Qt modules we need
SET (QT_USE_QTSCRIPT TRUE)
SET (QT_USE_QTXML TRUE)

# in order to build a Qt application, the Qt include directories
# needs to be added as well as a range of defines need to be set
INCLUDE (${QT_USE_FILE})
ADD_DEFINITIONS (${QT_DEFINITIONS})

# Qt code generators processing
QT4_WRAP_UI (MOC_FORMS ${FORMS})
QT4_WRAP_CPP (MOC_SOURCES ${HEADERS})
QT4_ADD_RESOURCES (QRC_SOURCES ${RESOURCES})

# before this file can be used to build the project there is a
# small caveat to handle. As all intermediate files are generated
# outside the source tree, the header file generated by uic will not
# be located by the compiler. In order to handle this, the build
# directory needs to be added to the list of include directories.
INCLUDE_DIRECTORIES (${CMAKE_BINARY_DIR})

# adding the source root to the include directories also to ease
# access to such misc things as globals.h, GenericObjectFactory.h, etc
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/src)

# turning on C++14 standart support, activating more warnings
ADD_COMPILE_OPTIONS (-std=c++14 -O0 -Wno-literal-suffix -Wno-unused-variable -Wno-unused-local-typedefs)

IF (OS2)
    # for OS/2, turning on highmem support
    ADD_COMPILE_OPTIONS (-Zhigh-mem)
    # and linking against stdcpp6.dll
    APPEND (LIBRARIES stdc++)
ENDIF ()

#######################################
##        LANGUAGE PROCSESING        ##
#######################################

SET (TS_PATH ${CMAKE_SOURCE_DIR}/lng)
SET (QM_PATH ${CMAKE_BINARY_DIR}/${BUILD_ROOT}/lng)
SET (LANGUAGES
    )

ADD_CUSTOM_TARGET (
    lng
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${TS_PATH} ${QM_PATH})

FOREACH (LANGUAGE ${LANGUAGES})
    APPEND (TSS ${QM_PATH}/${LANGUAGE}.ts)
ENDFOREACH ()

ADD_CUSTOM_COMMAND (
    TARGET lng
    COMMAND ${QT_LUPDATE_EXECUTABLE} ${HEADERS} ${SOURCES} -ts ${TSS}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

ADD_CUSTOM_COMMAND (
    TARGET lng
    COMMAND ${QT_LRELEASE_EXECUTABLE} ${TSS})

ADD_CUSTOM_COMMAND (
    TARGET lng
    COMMAND ${CMAKE_COMMAND} -E remove ${QM_PATH}/.gitkeep ${TSS})

# must have build directories created to release translations to
ADD_DEPENDENCIES (lng bld)

#######################################
##        PREPARE BUILD TREE         ##
#######################################

ADD_CUSTOM_TARGET (
    bld
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/${BUILD_ROOT})

ADD_CUSTOM_COMMAND (
    TARGET bld
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/${BUILD_ROOT_SOURCE_DIR} ${CMAKE_BINARY_DIR}/${BUILD_ROOT})

#######################################
##             BUILDING              ##
#######################################

ADD_EXECUTABLE (${BUILD_ROOT}/${BINARY_NAME} ${HEADERS} ${SOURCES} ${MOC_FORMS} ${MOC_SOURCES} ${QRC_SOURCES})
# no lng for now ADD_DEPENDENCIES (${BUILD_ROOT}/${BINARY_NAME} bld lng)
ADD_DEPENDENCIES (${BUILD_ROOT}/${BINARY_NAME} bld)
TARGET_LINK_LIBRARIES (${BUILD_ROOT}/${BINARY_NAME} ${LIBRARIES} ${QT_LIBRARIES})
